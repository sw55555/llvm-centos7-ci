name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    container:
        image: centos:7
    continue-on-error: false
    steps:
      - run: |
            yum install -y wget tar git gcc gcc-c++ glibc-devel unzip
            wget https://github.com/Kitware/CMake/releases/download/v3.24.1/cmake-3.24.1-linux-x86_64.tar.gz
            tar -xf cmake-3.24.1-linux-x86_64.tar.gz
            export PATH=$PWD/cmake-3.24.1-linux-x86_64/bin:$PATH
            wget https://github.com/ninja-build/ninja/releases/download/v1.11.0/ninja-linux.zip
            unzip ninja-linux.zip
            git clone https://github.com/llvm/llvm-project.git -b release/14.x
            mkdir build && cd build
            CC=gcc CXX=g++ cmake -DCMAKE_MAKE_PROGRAM=$PWD/../ninja -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=X86 -DLLVM_ENABLE_PROJECTS="clang;libcxx;libcxxabi;libunwind;compiler-rt;lld" -DLIBCXX_USE_COMPILER_RT=YES -DLIBCXXABI_USE_COMPILER_RT=YES -DLIBCXXABI_USE_LLVM_UNWINDER=YES -DCMAKE_INSTALL_PREFIX=$PWD/../llvm -DCMAKE_C_FLAGS="-fuse-ld=lld -fPIC" -DCMAKE_CXX_FLAGS="-fuse-ld=lld -stdlib=libc++ -fPIC" -G Ninja -DLLVM_BUILD_TOOLS=False -DLLVM_INCLUDE_TOOLS=True -DLLVM_INCLUDE_EXAMPLES=True -DLLVM_INCLUDE_TESTS=True ../llvm-project/llvm
            cmake --build . -t install -j 4
            cd ../llvm && tar -zcvf ../llvm.tar.gz . && cd -
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
